
// E7 Report Page105
// Moore state machine ,output is dependent on the present state 
module FSM(y, go ,jump ,clk, reset);
	input go , jump,clk,reset;
	output y;
	
	
	// 9 states , 4 bits binary encoding 
	parameter s0=4'b0000,s1=4'b0001,s2=4'b0010,s3=4'b0011,s4=4'b0100,s5=4'b0101,s6=4'b0110,s7=4'b0111,s8=4'b1000,s9=4'b1001;
	
	reg[3:0] state;
	reg[3:0] next_state;
	
	
	//next_state logic
	always@(state or go or jump)
		begin
			case(state)
				s0: if(!go) next_state =s0;
					else if(go & !jump) next_state=s1;
					else if (go & jump) next_state=s3;
						
				s1:	if(jump) next_state=s3;
					else if(!jump) next_state=s2;
					
				s2:	next_state=s3;
				
				s3: if(jump) next_state=s3;
					else if(!jump) next_state=s4; 
				
				s4: if(jump) next_state=s3;
					else if(!jump) next_state=s5;
				
				s5:if(jump) next_state=s3;
					else if(!jump) next_state=s6;
				
				s6:if(jump) next_state=s3;
					else if(!jump) next_state=s7;
				
				s7:if(jump) next_state=s3;
					else if(!jump) next_state=s8;
				
				s8:if(jump) next_state=s3;
					else if(!jump) next_state=s9;
				
				s9:if(jump) next_state=s3;
					else if(!jump) next_state=s0;
			endcase 	
		end	
		
		
		// state transition logic 
		always@(posedge clk)
			begin
				if (reset) state<=s0;
				else state<=next_state;
			end 	
			
		//ouput logic
		assign y =(state==s3 || state==s9)?1'b1:1'b0;
	
	
endmodule 
